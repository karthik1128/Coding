class Solution(object):
    def solveNQueens(self, n):
        def is_not_under_attack(row, col, queens):
             for queen in queens:
                 r, c = queen
                 if row == r or col == c or abs(row - r) == abs(col - c):
                     return False
             return True

        def place_queen(row, queens, solutions):
             if row == n:
                 solutions.append(queens[:])
                 return   
             for col in range(n):
                 if is_not_under_attack(row, col, queens):
                     queens.append((row, col))
                     place_queen(row + 1, queens, solutions)
                     queens.pop() 
        solutions = []
        place_queen(0, [], solutions)
        return [[''.join('Q' if (i, j) in solution else '.' for j in range(n)) for i in range(n)] for solution in solutions]
