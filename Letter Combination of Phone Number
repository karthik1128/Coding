class Solution(object):
    def letterCombinations(self, digits):
        if not digits:
             return []
         # Define the mapping of digits to letters
        digit_mapping = {
             '2': 'abc',
             '3': 'def',
             '4': 'ghi',
             '5': 'jkl',
             '6': 'mno',
             '7': 'pqrs',
             '8': 'tuv',
             '9': 'wxyz'
         }
        def backtrack(index, current):
        # If the current combination is of the same length as digits, add it to the result
             if index == len(digits):
                 result.append(current)
                 return
             # Get the letters associated with the current digit
             letters = digit_mapping[digits[index]]
             # Explore all possible combinations
             for letter in letters:
                 backtrack(index + 1, current + letter)
        result = []
        backtrack(0, '')

        return result
