class Solution(object):
    def minPathSum(self, grid):
         if not grid or not grid[0]:
             return 0
         m, n = len(grid), len(grid[0])

         # Create a 2D array to store the minimum sum of the path
         dp = [[0] * n for _ in range(m)]

          # Fill the first row and column with cumulative sums
         dp[0][0] = grid[0][0]
         for i in range(1, m):
             dp[i][0] = dp[i-1][0] + grid[i][0]
         for j in range(1, n):
             dp[0][j] = dp[0][j-1] + grid[0][j]
          # Fill the rest of the array with the minimum sum for each cell
         for i in range(1, m):
             for j in range(1, n):
                 dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
    
         # The result is stored in the bottom-right cell
         return dp[m-1][n-1] 
